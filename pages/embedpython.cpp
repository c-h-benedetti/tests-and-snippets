
/*!

\page embedpythonpage ‚äπ Notes Python Embeding

|             Topic                       |                               Link                                         |
|-----------------------------------------|----------------------------------------------------------------------------|
| __Releases de CPython__                 | https://github.com/python/cpython/tags                                     |
| __Extension et embedding__              | https://docs.python.org/3.10/extending/index.html                          |
| __Empaqueter des binaires__             | https://packaging.python.org/en/latest/guides/packaging-binary-extensions/ |
| __Explication linking modules CPython__ | https://thomasnyberg.com/what_are_extension_modules.html                   |
| __Tips CPython & C++__                  | https://thomasnyberg.com/cpp_extension_modules.html                        |
| __Utiliser Numpy & C++__                | https://pythonextensionpatterns.readthedocs.io/en/latest/cpp.html          |
| __C++ & CPython__                       | https://geghamjivanyan.medium.com/c-c-extension-for-python-f68444dab472    |


## üìñ Notes:

- CPython est simplement le code source de Python non-compil√©.
- Blender, qui a un des meilleurs Python int√©gr√©s, n'utilise rien d'autres que l'API de CPython (pas Cython, cffi, SWIG ou Numba)
- Le header `<Python.h>` doit √™tre inclus avant tout autre module.

## üöÄ Objectifs:

- [X] Arriver √† compiler Python et ex√©cuter un script depuis le binaire C++.
- [X] Faire un CMakeLists.txt pour t√©l√©charger et compiler CPython.
- [X] Arranger le CMakeLists.txt pour qu'il injecte le build path comme variable de pr√©processeur dans le C++.
- [ ] Encapsuler la cr√©ation et destruction de contexte Python dans un objet plut√¥t que dans des fonctions.
- [ ] Cr√©er en C++ des objets manipulables depuis Python.
- [ ] G√©rer le fait que les paths ne sont pas obligatoirement que du AscII dans `init_python`.
- [ ] Est-il possible d'avoir plusieurs Pythons en m√™me temps vu que les fonctions ont l'air globales ? Cela d√©pend-il seulement du dernier contexte cr√©√© ?
- [ ] Cr√©er un type de donn√©es qui peut devenir un tableau `numpy`.
- [ ] Est-ce que certaines donn√©es doivent √™tre stock√©es exclusivement c√¥t√© C++ ?
- [ ] Fix le CMake pour qu'il n'utilise pas 'configure' √† chaque call √† `make`.

---

## üõ†Ô∏è Compilation de CPython dans du C++:

### 1. T√©l√©chargement de CPython

- La premi√®re √©tape est de t√©l√©charger une version stable du code source depuis une release (tag) du d√©p√¥t de CPython.
- Ce code est compatible avec l'utilisation de CMake pour la compilation du projet.

\warning Le t√©l√©chargement devrait √™tre fait dans le CMakeLists.txt, pas √† la vol√©e depuis le github de CPython.

- Un CMakeLists.txt (presque) g√©n√©rique se trouve dans le dossier consacr√© √† CPython de ce repository.

### 2. Contenu du CMakeLists.txt

### 3. Configuration des variables d'environnement

### 4. Cr√©ation d'entit√©s customs en C/C++

\warning Le nom de la fonction `PyInit_[name]` est important. En effet, lors du chargement des librairies (qui se fait de fa√ßon dynamique), la proc√©dure suivante est utilis√©e:
- **Step 1:** Find and open a shared library file called `[name].so`.
- **Step 2:** Find and load in a function called `PyInit_[name]`.
- **Step 3:** Execute that function.
- **Step 4:** Return control back to interpreter.

*/