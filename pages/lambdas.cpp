
/*!

\page lambdaexprpage ‚äπ Notes Œª-expressions

## G√©n√©ralit√©s:

### La liste de captures, qui permet de capturer des variables externes pour les utiliser dans la lambda expression. On peut sp√©cifier les captures de diff√©rentes mani√®res :

- `[&]` pour capturer toutes les variables par r√©f√©rence ;
- `[=]` pour capturer toutes les variables par copie ;
- `[var1, var2]` pour capturer des variables sp√©cifiques par copie ;
- `[&var1, &var2]` pour capturer des variables sp√©cifiques par r√©f√©rence;
- `[v = expr]` pour faire une "init capture", c'est-√†-dire cr√©er une nouvelle variable valable dans le corps de l'expression.

### Les sp√©cificateurs de fonction, qui permettent de d√©finir des propri√©t√©s suppl√©mentaires pour la lambda expression, tels que la constance ou la volatilit√©. On peut sp√©cifier les sp√©cificateurs de fonction de diff√©rentes mani√®res :

- `() -> int` pour sp√©cifier le type de retour de la lambda expression ;
- `() const` pour rendre la lambda expression constante ;
- `() noexcept` pour sp√©cifier que la lambda expression ne lance pas d'exception ;
- `() -> int const &` pour sp√©cifier le type de retour de la lambda expression comme une r√©f√©rence constante.
 
### Les param√®tres de la lambda expression, qui sont sp√©cifi√©s apr√®s les sp√©cificateurs de fonction et qui d√©crivent les arguments que la lambda expression prend. On peut sp√©cifier les param√®tres de diff√©rentes mani√®res :
 
- `()` pour sp√©cifier une lambda expression qui ne prend aucun argument ;
- `(int x, double y)` pour sp√©cifier une lambda expression qui prend deux arguments, un int nomm√© x et un double nomm√© y.

__Note:__ Les crochets peuvent √™tre laiss√©s vides si aucun comportement sp√©cial n'est requis.

---

## üìå Init capture

Dans les crochets, il est possible de cr√©er une nouvelle variable utilisable dans le corps de l'expression.
Modifier les variables externes apr√®s la d√©claration ne sert √† rien, la variable est √©valu√©e √† la d√©finition.

\snippet 003-lambda-expressions/main.cpp init_capture

## üìå Avec SigC

Grace aux Œª-expressions, on peut remplacer la premi√®re ligne par la seconde, qui est nettement plus lisible. Il est m√™me possible de donner directement le corps dans l'appel de la fonction dans ce cas.

\code{.cpp}
GLArea glArea;
glArea.signal_realize().connect(sigc::mem_fun(glArea, &GLArea::on_realize_signal));
glArea.signal_realize().connect([&glArea](){ glArea.on_realize_signal(); });
\endcode

*/