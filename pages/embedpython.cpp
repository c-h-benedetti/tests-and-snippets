
/*!

\page embedpythonpage ‚äπ Notes Python Embeding

|             Topic             |                               Link                                         |
|-------------------------------|----------------------------------------------------------------------------|
| __Releases de CPython__       | https://github.com/python/cpython/tags                                     |
| __Extension et embedding__    | https://docs.python.org/3.10/extending/index.html                          |
| __Empaqueter des binaires__   | https://packaging.python.org/en/latest/guides/packaging-binary-extensions/ |


## üìñ Notes:

- CPython est simplement le code source de Python non-compil√©.
- Blender, qui a un des meilleurs Python int√©gr√©s, n'utilise rien d'autres que l'API de CPython (pas Cython, cffi, SWIG ou Numba)
- Le header `<Python.h>` doit √™tre inclus avant tout autre module.

## üöÄ Objectifs:

- [X] Arriver √† compiler Python et ex√©cuter un script depuis le binaire C++.
- [X] Faire un CMakeLists.txt pour t√©l√©charger et compiler CPython.
- [X] Arranger le CMakeLists.txt pour qu'il injecte le build path comme variable de pr√©processeur dans le C++.
- [ ] Encapsuler la cr√©ation et destruction de contexte Python dans un objet plut√¥t que dans des fonctions.
- [ ] Cr√©er en C++ des objets manipulables depuis Python.
- [ ] G√©rer le fait que les paths ne sont pas obligatoirement que du AscII dans `init_python`.
- [ ] Est-il possible d'avoir plusieurs Pythons en m√™me temps vu que les fonctions ont l'air globales ? Cela d√©pend-il seulement du dernier contexte cr√©√© ?
- [ ] Cr√©er un type de donn√©es qui peut devenir un tableau `numpy`.
- [ ] Est-ce que certaines donn√©es doivent √™tre stock√©es exclusivement c√¥t√© C++ ?
- [ ] Fix le CMake pour qu'il n'utilise pas 'configure' √† chaque call √† `make`.

---

## üõ†Ô∏è Compilation de CPython dans du C++:

### 1. T√©l√©chargement de CPython

- La premi√®re √©tape est de t√©l√©charger une version stable du code source depuis une release (tag) du d√©p√¥t de CPython.
- Ce code est compatible avec l'utilisation de CMake pour la compilation du projet.

\warning Le t√©l√©chargement devrait √™tre fait dans le cmake, pas √† la vol√©e depuis le github de CPython.   
Il semblerait que ces blocs puissent comprendre plusieurs lignes.   
\code{.cpp}
// header
void GLArea::on_realize();
\endcode

\note Cette fonction doit √™tre appel√©e avant toute autre op√©ration.

\todo Impl√©menter la prise en charge de la r√©cup√©ration d'erreurs.

\bug Ce bloc signale la pr√©sence d'un bug connu.

\deprecated Ce block indique la pr√©sence d'une entit√© en voie de d√©pr√©cation (ou d√©j√† supprim√©e).

\invariant Ceci est un √©tat maintenu par un objet ou un algorithme.

> Ceci est une citation si je ne me trompe pas.

\code{.cpp}
// header
void on_realize() override;

// impl√©mentation
void GLArea::on_realize() {
    Gtk::GLArea::on_realize(); // √Ä ne pas oublier !!!
    make_current();
    GLenum error = glGetError();
    glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
}
\endcode

### 2. Contenu du CMakeLists.txt

### 3. Configuration des variables d'environnement

#### Cr√©ation d'entit√©s customs en C++

- Cr√©er les donn√©es √† rendre (vertices, faces, uv, couleurs, ...)
- Cr√©er les shaders, les compiler (v√©rifier le status de compilation), les assembler en programme et lib√©rer les shaders de base.
- G√©n√©rer un VAO et le bind avant de continuer.
- G√©n√©rer un VBO, le bind, et y transf√©rer les donn√©es de vertices.
- G√©n√©rer un EBO, le bind, et y transf√©rer les donn√©es de faces.
- Renseigner les informations d'interpr√©tation du contenu du VBO (offset, stride, ...) et activer les attributs qui y sont contenus.
- Unbind le VAO __puis__ tous les autres buffers. Proc√©dure (et ordre √† suivre) pour debind les buffers:

\code{.cpp}
glBindVertexArray(0);
glBindBuffer(GL_ARRAY_BUFFER, 0);
glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
\endcode

#### Notes

- Ne pas oublier le tag `GL_DEPTH_BUFFER_BIT` dans `glClear()` si `set_has_depth_buffer(true)` a √©t√© utilis√© dans le constructeur. Sinon, rien ne sera rendu √† l'√©cran sauf si la fen√™tre est resized.
- Quand on fait un setup de rendu, le VAO doit √™tre le premier unbound, sinon, il record le fait qu'on fasse debind les buffers.
- Dans la fonction `glVertexAttribPointer`, le premier index est celui qui doit √™tre donn√© √† `glEnableVertexAttribArray` ainsi que celui dans le shader dans `(layout = N)`.

### 3. Le rendu

- Les buffers sont automatiquement swapped dans `on_render()`.

### 4. Destruction du contexte

- `on_unrealize` est √©mis quand le contexte OpenGL est encore valide, juste avant que l'objet de soit d√©truit. C'est le moment de d√©truire toutes les ressources OpenGL (qui ne seront plus accessible quand le contexte OpenGL ne sera plus valide).

## üìå Epoxy:

- √âquivalent de GLAD ou m√™me GLEW, permet de faciliter l'utilisation de fonctions OpenGL.
- Le header doit absolument √™tre le premier de son unit√© de compilation. La solution trouv√©e a √©t√© de mettre Epoxy dans le .cpp uniquement. Configuration utilis√©e:

\code{.cpp}
// main.cpp
#include <vector>
#include <gtkmm.h>
#include "header.hpp"
#include "other-header.hpp"

// header
#include <gtkmm/glarea.h>

// implementation
#include "header.hpp"
#include <epoxy/gl.h>
#include <epoxy/glx.h>
\endcode

*/